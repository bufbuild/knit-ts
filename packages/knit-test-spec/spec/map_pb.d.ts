// @generated by protoc-gen-es v1.3.0
// @generated from file spec/map.proto (package spec, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum spec.MapEnum
 */
export declare enum MapEnum {
  /**
   * @generated from enum value: MAP_ENUM_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: MAP_ENUM_FIRST = 1;
   */
  FIRST = 1,
}

/**
 * @generated from message spec.Map
 */
export declare class Map extends Message<Map> {
  /**
   * @generated from field: spec.Keys keys = 1;
   */
  keys?: Keys;

  /**
   * @generated from field: map<string, spec.Map> message = 2;
   */
  message: { [key: string]: Map };

  /**
   * @generated from field: map<string, spec.MapEnum> enum = 3;
   */
  enum: { [key: string]: MapEnum };

  constructor(data?: PartialMessage<Map>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.Map";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Map;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Map;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Map;

  static equals(a: Map | PlainMessage<Map> | undefined, b: Map | PlainMessage<Map> | undefined): boolean;
}

/**
 * @generated from message spec.Keys
 */
export declare class Keys extends Message<Keys> {
  /**
   * @generated from field: map<string, string> str = 1;
   */
  str: { [key: string]: string };

  /**
   * @generated from field: map<bool, string> bl = 2;
   */
  bl: { [key: string]: string };

  /**
   * @generated from field: map<int32, string> i32 = 3;
   */
  i32: { [key: number]: string };

  /**
   * @generated from field: map<int64, string> i64 = 4;
   */
  i64: { [key: string]: string };

  /**
   * @generated from field: map<uint32, string> u32 = 5;
   */
  u32: { [key: number]: string };

  /**
   * @generated from field: map<uint64, string> u64 = 6;
   */
  u64: { [key: string]: string };

  /**
   * @generated from field: map<sint32, string> s32 = 7;
   */
  s32: { [key: number]: string };

  /**
   * @generated from field: map<sint64, string> s64 = 8;
   */
  s64: { [key: string]: string };

  /**
   * @generated from field: map<fixed32, string> f32 = 9;
   */
  f32: { [key: number]: string };

  /**
   * @generated from field: map<fixed64, string> f64 = 10;
   */
  f64: { [key: string]: string };

  /**
   * @generated from field: map<sfixed32, string> sf32 = 11;
   */
  sf32: { [key: number]: string };

  /**
   * @generated from field: map<sfixed64, string> sf64 = 12;
   */
  sf64: { [key: string]: string };

  constructor(data?: PartialMessage<Keys>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.Keys";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Keys;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Keys;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Keys;

  static equals(a: Keys | PlainMessage<Keys> | undefined, b: Keys | PlainMessage<Keys> | undefined): boolean;
}

