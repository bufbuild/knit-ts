// @generated by protoc-gen-es v1.5.0
// @generated from file spec/scalars.proto (package spec, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message spec.Scalar
 */
export declare class Scalar extends Message<Scalar> {
  /**
   * @generated from field: spec.ScalarFields fields = 1;
   */
  fields?: ScalarFields;

  /**
   * @generated from field: spec.ScalarRepeated repeated = 2;
   */
  repeated?: ScalarRepeated;

  /**
   * @generated from field: spec.ScalarMap map = 3;
   */
  map?: ScalarMap;

  /**
   * @generated from field: spec.ScalarOneof oneof = 4;
   */
  oneof?: ScalarOneof;

  constructor(data?: PartialMessage<Scalar>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.Scalar";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Scalar;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Scalar;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Scalar;

  static equals(a: Scalar | PlainMessage<Scalar> | undefined, b: Scalar | PlainMessage<Scalar> | undefined): boolean;
}

/**
 * @generated from message spec.ScalarFields
 */
export declare class ScalarFields extends Message<ScalarFields> {
  /**
   * @generated from field: string str = 1;
   */
  str: string;

  /**
   * @generated from field: bool bl = 2;
   */
  bl: boolean;

  /**
   * @generated from field: int32 i32 = 3;
   */
  i32: number;

  /**
   * @generated from field: int64 i64 = 4;
   */
  i64: bigint;

  /**
   * @generated from field: uint32 u32 = 5;
   */
  u32: number;

  /**
   * @generated from field: uint64 u64 = 6;
   */
  u64: bigint;

  /**
   * @generated from field: sint32 s32 = 7;
   */
  s32: number;

  /**
   * @generated from field: sint64 s64 = 8;
   */
  s64: bigint;

  /**
   * @generated from field: fixed32 f32 = 9;
   */
  f32: number;

  /**
   * @generated from field: fixed64 f64 = 10;
   */
  f64: bigint;

  /**
   * @generated from field: sfixed32 sf32 = 11;
   */
  sf32: number;

  /**
   * @generated from field: sfixed64 sf64 = 12;
   */
  sf64: bigint;

  /**
   * @generated from field: bytes by = 13;
   */
  by: Uint8Array;

  /**
   * @generated from field: double db = 14;
   */
  db: number;

  /**
   * @generated from field: float fl = 15;
   */
  fl: number;

  constructor(data?: PartialMessage<ScalarFields>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.ScalarFields";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarFields;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarFields;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarFields;

  static equals(a: ScalarFields | PlainMessage<ScalarFields> | undefined, b: ScalarFields | PlainMessage<ScalarFields> | undefined): boolean;
}

/**
 * @generated from message spec.ScalarFieldsOptional
 */
export declare class ScalarFieldsOptional extends Message<ScalarFieldsOptional> {
  /**
   * @generated from field: optional string str = 1;
   */
  str?: string;

  /**
   * @generated from field: optional bool bl = 2;
   */
  bl?: boolean;

  /**
   * @generated from field: optional int32 i32 = 3;
   */
  i32?: number;

  /**
   * @generated from field: optional int64 i64 = 4;
   */
  i64?: bigint;

  /**
   * @generated from field: optional uint32 u32 = 5;
   */
  u32?: number;

  /**
   * @generated from field: optional uint64 u64 = 6;
   */
  u64?: bigint;

  /**
   * @generated from field: optional sint32 s32 = 7;
   */
  s32?: number;

  /**
   * @generated from field: optional sint64 s64 = 8;
   */
  s64?: bigint;

  /**
   * @generated from field: optional fixed32 f32 = 9;
   */
  f32?: number;

  /**
   * @generated from field: optional fixed64 f64 = 10;
   */
  f64?: bigint;

  /**
   * @generated from field: optional sfixed32 sf32 = 11;
   */
  sf32?: number;

  /**
   * @generated from field: optional sfixed64 sf64 = 12;
   */
  sf64?: bigint;

  /**
   * @generated from field: optional bytes by = 13;
   */
  by?: Uint8Array;

  /**
   * @generated from field: optional double db = 14;
   */
  db?: number;

  /**
   * @generated from field: optional float fl = 15;
   */
  fl?: number;

  constructor(data?: PartialMessage<ScalarFieldsOptional>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.ScalarFieldsOptional";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarFieldsOptional;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarFieldsOptional;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarFieldsOptional;

  static equals(a: ScalarFieldsOptional | PlainMessage<ScalarFieldsOptional> | undefined, b: ScalarFieldsOptional | PlainMessage<ScalarFieldsOptional> | undefined): boolean;
}

/**
 * @generated from message spec.ScalarRepeated
 */
export declare class ScalarRepeated extends Message<ScalarRepeated> {
  /**
   * @generated from field: repeated string str = 1;
   */
  str: string[];

  /**
   * @generated from field: repeated bool bl = 2;
   */
  bl: boolean[];

  /**
   * @generated from field: repeated int32 i32 = 3;
   */
  i32: number[];

  /**
   * @generated from field: repeated int64 i64 = 4;
   */
  i64: bigint[];

  /**
   * @generated from field: repeated uint32 u32 = 5;
   */
  u32: number[];

  /**
   * @generated from field: repeated uint64 u64 = 6;
   */
  u64: bigint[];

  /**
   * @generated from field: repeated sint32 s32 = 7;
   */
  s32: number[];

  /**
   * @generated from field: repeated sint64 s64 = 8;
   */
  s64: bigint[];

  /**
   * @generated from field: repeated fixed32 f32 = 9;
   */
  f32: number[];

  /**
   * @generated from field: repeated fixed64 f64 = 10;
   */
  f64: bigint[];

  /**
   * @generated from field: repeated sfixed32 sf32 = 11;
   */
  sf32: number[];

  /**
   * @generated from field: repeated sfixed64 sf64 = 12;
   */
  sf64: bigint[];

  /**
   * @generated from field: repeated bytes by = 13;
   */
  by: Uint8Array[];

  /**
   * @generated from field: repeated double db = 14;
   */
  db: number[];

  /**
   * @generated from field: repeated float fl = 15;
   */
  fl: number[];

  constructor(data?: PartialMessage<ScalarRepeated>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.ScalarRepeated";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarRepeated;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarRepeated;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarRepeated;

  static equals(a: ScalarRepeated | PlainMessage<ScalarRepeated> | undefined, b: ScalarRepeated | PlainMessage<ScalarRepeated> | undefined): boolean;
}

/**
 * @generated from message spec.ScalarMap
 */
export declare class ScalarMap extends Message<ScalarMap> {
  /**
   * @generated from field: map<string, string> str = 1;
   */
  str: { [key: string]: string };

  /**
   * @generated from field: map<string, bool> bl = 2;
   */
  bl: { [key: string]: boolean };

  /**
   * @generated from field: map<string, int32> i32 = 3;
   */
  i32: { [key: string]: number };

  /**
   * @generated from field: map<string, int64> i64 = 4;
   */
  i64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, uint32> u32 = 5;
   */
  u32: { [key: string]: number };

  /**
   * @generated from field: map<string, uint64> u64 = 6;
   */
  u64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, sint32> s32 = 7;
   */
  s32: { [key: string]: number };

  /**
   * @generated from field: map<string, sint64> s64 = 8;
   */
  s64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, fixed32> f32 = 9;
   */
  f32: { [key: string]: number };

  /**
   * @generated from field: map<string, fixed64> f64 = 10;
   */
  f64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, sfixed32> sf32 = 11;
   */
  sf32: { [key: string]: number };

  /**
   * @generated from field: map<string, sfixed64> sf64 = 12;
   */
  sf64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, bytes> by = 13;
   */
  by: { [key: string]: Uint8Array };

  /**
   * @generated from field: map<string, double> db = 14;
   */
  db: { [key: string]: number };

  /**
   * @generated from field: map<string, float> fl = 15;
   */
  fl: { [key: string]: number };

  constructor(data?: PartialMessage<ScalarMap>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.ScalarMap";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarMap;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarMap;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarMap;

  static equals(a: ScalarMap | PlainMessage<ScalarMap> | undefined, b: ScalarMap | PlainMessage<ScalarMap> | undefined): boolean;
}

/**
 * @generated from message spec.ScalarOneof
 */
export declare class ScalarOneof extends Message<ScalarOneof> {
  /**
   * @generated from oneof spec.ScalarOneof.oneof_value
   */
  oneofValue: {
    /**
     * @generated from field: string str = 1;
     */
    value: string;
    case: "str";
  } | {
    /**
     * @generated from field: bool bl = 2;
     */
    value: boolean;
    case: "bl";
  } | {
    /**
     * @generated from field: int32 i32 = 3;
     */
    value: number;
    case: "i32";
  } | {
    /**
     * @generated from field: int64 i64 = 4;
     */
    value: bigint;
    case: "i64";
  } | {
    /**
     * @generated from field: uint32 u32 = 5;
     */
    value: number;
    case: "u32";
  } | {
    /**
     * @generated from field: uint64 u64 = 6;
     */
    value: bigint;
    case: "u64";
  } | {
    /**
     * @generated from field: sint32 s32 = 7;
     */
    value: number;
    case: "s32";
  } | {
    /**
     * @generated from field: sint64 s64 = 8;
     */
    value: bigint;
    case: "s64";
  } | {
    /**
     * @generated from field: fixed32 f32 = 9;
     */
    value: number;
    case: "f32";
  } | {
    /**
     * @generated from field: fixed64 f64 = 10;
     */
    value: bigint;
    case: "f64";
  } | {
    /**
     * @generated from field: sfixed32 sf32 = 11;
     */
    value: number;
    case: "sf32";
  } | {
    /**
     * @generated from field: sfixed64 sf64 = 12;
     */
    value: bigint;
    case: "sf64";
  } | {
    /**
     * @generated from field: bytes by = 13;
     */
    value: Uint8Array;
    case: "by";
  } | {
    /**
     * @generated from field: double db = 14;
     */
    value: number;
    case: "db";
  } | {
    /**
     * @generated from field: float fl = 15;
     */
    value: number;
    case: "fl";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<ScalarOneof>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "spec.ScalarOneof";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ScalarOneof;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ScalarOneof;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ScalarOneof;

  static equals(a: ScalarOneof | PlainMessage<ScalarOneof> | undefined, b: ScalarOneof | PlainMessage<ScalarOneof> | undefined): boolean;
}

